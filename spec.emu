<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Error Stacks
stage: 1
contributors: Jordan Harband, Mark Miller
</pre>

<emu-clause id="sec-system">
	<h1>System</h1>

	<emu-clause id="sec-system-get-stack" oldids="sec-getstack">
		<h1>System.getStack ( _error_ )</h1>
		<p>When the `getStack` method is called with argument _error_, the following steps are taken:</p>
		<emu-alg>
			1. Perform ? RequireInternalSlot(_error_, [[ErrorData]]).
			1. Let _string_ be ? GetStackString(_error_).
			1. Let _frames_ be ! GetStackFramesArray(_error_).
			1. Let _obj_ be ! ObjectCreate(%ObjectPrototype%).
			1. Perform ! CreateDataPropertyOrThrow(_obj_, *"frames"*, _frames_).
			1. Perform ! CreateDataPropertyOrThrow(_obj_, *"string"*, _string_).
			1. Return _obj_.
		</emu-alg>

		<emu-clause id="sec-getstackframesarray" aoid="GetStackFramesArray" oldids="sec-getstackframes">
			<h1>GetStackFramesArray ( _error_ )</h1>
			<p>The abstract operation GetStackFramesArray takes argument _error_. It performs the following steps when called:</p>
			<emu-alg>
				1. Assert: _error_ is an Object that has an [[ErrorData]] internal slot.
				1. Let _frames_ be a new empty List.
				1. For each Stack Frame Record _frame_ of _error_.[[ErrorData]], append ! FromStackFrame(_frame_) to _frames_.
				1. Return ! CreateArrayFromList(_frames_).
			</emu-alg>
		</emu-clause>
	</emu-clause>

	<emu-clause id="sec-system-get-stack-string">
		<h1>System.getStackString ( _error_ )</h1>
		<p>When the `getStackString` method is called with argument _error_, the following steps are taken:</p>
		<emu-alg>
			1. Perform ? RequireInternalSlot(_error_, [[ErrorData]]).
			1. Return ? GetStackString(_error_).
		</emu-alg>

		<emu-clause id="sec-getstackstring" aoid="GetStackString">
			<h1>GetStackString ( _error_ )</h1>
			<p>The abstract operation GetStackString takes argument _error_. It performs the following steps when called:</p>
			<emu-alg>
				1. Assert: _error_ is an Object that has an [[ErrorData]] internal slot.
				1. Let _stackString_ be ? ToString(_error_).
				1. For each Stack Frame Record _frame_ of _error_.[[ErrorData]], do
					1. Let _frameString_ be ! GetStackFrameString(_frame_).
					1. Set _stackString_ to the string-concatenation of _stackString_, the code unit 0x000A (LINE FEED), the code unit 0x0020 (SPACE), and _frameString_.
				1. Return _stackString_.
			</emu-alg>
		</emu-clause>
	</emu-clause>
</emu-clause>

<emu-clause id="sec-error-objects">
	<h1>Error Objects</h1>

	<emu-clause id="sec-properties-of-error-instances">
		<h1>Properties of Error Instances</h1>
		<p>Error instances are ordinary objects that inherit properties from the <emu-xref href="#sec-properties-of-the-error-prototype-object">Error prototype object</emu-xref> <del>and have an [[ErrorData]] internal slot whose value is *undefined*. The only specified uses of [[ErrorData]] is to identify Error, AggregateError, and _NativeError_ instances as Error objects within `Object.prototype.toString`</del><ins>(the intrinsic, <emu-xref href="#sec-properties-of-the-error-prototype-object">%Error.prototype%</emu-xref>). Error instances are initially created with the internal slots described in <emu-xref href="#table-internal-slots-of-error-instances"></emu-xref></ins>.</p>
		<ins class="block">
			<emu-table id="table-internal-slots-of-error-instances" caption="Internal Slots of Error Instances">
				<table>
					<tbody>
					<tr>
						<th>Internal Slot</th>
						<th>Description</th>
					</tr>
					<tr>
						<td>[[ErrorData]]</td>
						<td>A List of Stack Frame records.</td>
					</tr>
					</tbody>
				</table>
			</emu-table>
		</ins>
	</emu-clause>

	<emu-clause id="sec-stack-frame-records" oldids="sec-stack-frame-specification-type">
		<h1>Stack Frame Records</h1>
		<p>A <dfn>Stack Frame Record</dfn> is a Record value used to store stack information of Error objects.</p>
		<p>Stack Frame Records have the fields listend in <emu-xref href="#table-stack-frame-record-fields"></emu-xref></p>
		<emu-table id="table-stack-frame-record-fields" caption="Stack Frame Record Fields">
			<table>
				<tbody>
				<tr>
					<th>Field Name</th>
					<th>Value</th>
				</tr>
				<tr>
					<td>[[Name]]</td>
					<td>String</td>
				</tr>
				<tr>
					<td>[[Source]]</td>
					<td>String | Stack Frame Record</td>
				</tr>
				<tr>
					<td>[[Span]]</td>
					<td>Stack Frame Span Record | ~empty~</td>
				</tr>
				</tbody>
			</table>
		</emu-table>

		<emu-clause id="sec-fromstackframe" aoid="FromStackFrame">
			<h1>FromStackFrame ( _frame_ )</h1>
			<p>The abstract operation FromStackFrame takes argument _frame_ (a Stack Frame Record). It performs the following steps when called:</p>
			<emu-alg>
				1. Let _obj_ be ! ObjectCreate(%ObjectPrototype%).
				1. Perform ! CreateDataPropertyOrThrow(_obj_, *"name"*, _frame_.[[Name]]).
				1. If _frame_.[[Source]] is a Stack Frame Record, then
					1. Let _sourceFrameObj_ be ! FromStackFrame(_frame_.[[Source]]).
					1. Perform ! CreateDataPropertyOrThrow(_obj_, *"source"*, _sourceFrameObj_).
				1. Else,
					1. Assert: Type(_frame_.[[Source]]) is String.
					1. Perform ! CreateDataPropertyOrThrow(_obj_, *"source"*, _frame_.[[Source]]).
				1. If _frame_.[[Span]] is not ~empty~, then
					1. Let _spanObj_ be ! FromStackFrameSpan(_frame_.[[Span]]).
					1. Perform ! CreateDataPropertyOrThrow(_obj_, *"span"*, _spanObj_).
				1. Return _obj_.
			</emu-alg>
		</emu-clause>

		<emu-clause id="sec-getstackframestring" aoid="GetStackFrameString" oldids="sec-getframestring">
			<h1>GetStackFrameString ( _frame_ )</h1>
			<p>The abstract operation GetStackFrameString takes argument _frame_ (a Stack Frame Record). It performs the following steps when called:</p>
			<emu-alg>
				1. If _frame_.[[Source]] is a Stack Frame Record, then
					1. Let _sourceFrameString_ be ! GetStackFrameString(_frame_.[[Source]]).
					1. Let _sourceString_ be the string-concatenation of *"eval*" and _sourceFrameString_.
				1. Else,
					1. Assert: Type(_frame_.[[Source]]) is String.
					1. Let _sourceString_ be _frame_.[[Source]].
				1. Let _spanString_ be the empty string.
				1. If _source_.[[Span]] is not ~empty~, set _spanString_ to ! GetStackFrameSpanString(_source_.[[Span]]).
				1. Let _frameString_ be the string-concatenation of the code unit 0x0020 (SPACE), *"at"*, and the code unit 0x0020 (SPACE).
				1. If _frame_.[[Name]] is not the empty string, set _frameString_ to the string-concatenation of _frameString_, frame.[[Name]], and the code unit 0x0020 (SPACE).
				1. Return the string-concatenation of _frameString_, *"("*, _sourceString_, _spanString_, and *")"*.
			</emu-alg>
		</emu-clause>

		<emu-clause id="sec-stack-frame-span-records">
			<h1>Stack Frame Span Records</h1>
			<p>A <dfn>Stack Frame Span Record</dfn> is a Record value used to store location information of a Stack Frame Record.</p>
			<p>Stack Frame Span Records have the fields listed in <emu-xref href="#table-stack-frame-span-record-fields"></emu-xref></p>
			<emu-table id="table-stack-frame-span-record-fields" caption="Stack Frame Span Record Fields">
				<table>
					<tbody>
					<tr>
						<th>Field Name</th>
						<th>Value</th>
					</tr>
					<tr>
						<td>[[StartPosition]]</td>
						<td>Stack Frame Position Record</td>
					</tr>
					<tr>
						<td>[[EndPosition]]</td>
						<td>Stack Frame Position Record | ~empty~</td>
					</tr>
					</tbody>
				</table>
			</emu-table>

			<emu-clause id="sec-fromstackframespan" aoid="FromStackFrameSpan">
				<h1>FromStackFrameSpan ( _span_ )</h1>
				<p>The abstract operation FromStackFrameSpan takes argument _span_ (a Stack Frame Span Record). It performs the following steps when called:</p>
				<emu-alg>
					1. Let _list_ be a new empty List.
					1. Append ! FromStackFramePosition(_span_.[[StartPosition]]) to _list_.
					1. If _span_.[[EndPosition]] is not empty, append ! FromStackFramePosition(_span_.[[EndPosition]]) to _list_.
					1. Return ! CreateArrayFromList(_list_).
				</emu-alg>
			</emu-clause>

			<emu-clause id="sec-getstackframespanstring" aoid="GetStackFrameSpanString">
				<h1>GetStackFrameSpanString( _span_ )</h1>
				<p>The abstract operation GetStackFrameSpanString takes argument _span_ (a Stack Frame Span Record). It performs the following steps when called:</p>
				<emu-alg>
					1. Let _startPositionString_ be ! GetStackFramePositionString(_span_.[[StartPosition]]).
					1. If _span_.[[EndPosition]] is not ~empty~, then
						1. Let _endPositionString_ be ! GetStackFramePositionString(_span_.[[EndPosition]]).
						1. Return the string-concatenation of _startPositionString_, *"::"*, and _endPositionString_.
					1. Return _startPositionString_.
				</emu-alg>
			</emu-clause>

			<emu-clause id="sec-stack-frame-position-records">
				<h1>Stack Frame Position Records</h1>
				<p>A <dfn>Stack Frame Position Record</dfn> is a Record value used to store position information of a Stack Frame Span Record.</p>
				<p>Stack Frame Position Records have the fields listed in <emu-xref href="#table-stack-frame-position-record-fields"></emu-xref></p>
				<emu-table id="table-stack-frame-position-record-fields" caption="Stack Frame Position Record Fields">
					<table>
						<tbody>
						<tr>
							<th>Field Name</th>
							<th>Value</th>
						</tr>
						<tr>
							<td>[[Line]]</td>
							<td>A positive integer</td>
						</tr>
						<tr>
							<td>[[Column]]</td>
							<td>A non-negative integer | ~empty~</td>
						</tr>
						</tbody>
					</table>
				</emu-table>

				<emu-clause id="sec-fromstackframeposition" aoid="FromStackFramePosition">
					<h1>FromStackFramePosition ( _position_ )</h1>
					<p>The abstract operation FromStackFramePosition takes argument _position_ (a Stack Frame Position Record). It performs the following steps when called:</p>
					<emu-alg>
						1. Let _list_ be a new empty List.
						1. Append _position_.[[Line]] to _list_.
						1. If _position_.[[Column]] is not ~empty~, append _position_.[[Column]] to _list_.
						1. Return ! CreateArrayFromList(_list_).
					</emu-alg>
				</emu-clause>

				<emu-clause id="sec-getstackframepositionstring" aoid="GetStackFramePositionString">
					<h1>GetStackFramePositionString( _position_ )</h1>
					<p>The abstract operation GetStackFramePositionString takes argument _position_ (a Stack Frame Position Record). It performs the following steps when called:</p>
					<emu-alg>
						1. Let _lineString_ be ! ToString(𝔽(_position_.[[Line]])).
						1. If _position_.[[Column]] is not empty, then
							1. Let _columnString_ be ! ToString(𝔽(_position_.[[Column]])).
							1. Return the string-concatenation of _positionString_, *":"*, and _columnString_.
						1. Return _lineString_.
					</emu-alg>
				</emu-clause>
			</emu-clause>
		</emu-clause>
	</emu-clause>
</emu-clause>

<emu-annex id="sec-grammar-summary">
	<h1>Placeholder to ensure correct annex lettering</h1>
</emu-annex>

<emu-annex id="sec-additional-built-in-properties">
	<h1>Additional Built-in Properties</h1>
	<p>When the ECMAScript host is a web browser the following additional properties of the standard built-in objects are defined.</p>

	<emu-annex id="sec-additional-properties-of-the-error.prototype-object">
		<h1>Additional Properties of the Error.prototype Object</h1>

		<emu-annex id="sec-get-error.prototype-stack">
			<h1>get Error.prototype.stack ( )</h1>
			<p>*Error.prototype.stack* is an accessor property whose get accessor function performs the following steps:</p>
			<emu-alg>
				1. Let _E_ be the *this* value.
				1. If ! Type(_E_) is not Object, throw a *TypeError* exception.
				1. If _E_ does not have an [[ErrorData]] internal slot, return *undefined*.
				1. Return ? GetStackString(_error_).
			</emu-alg>
			<p>The value of the *"name"* property of this function is *"get stack"*.</p>
		</emu-annex>

		<emu-annex id="sec-set-error.prototype-stack">
			<h1>set Error.prototype.stack ( _value_ )</h1>
			<p>Its set accessor function performs the following steps:</p>
			<emu-alg>
				1. Let _E_ be the *this* value.
				1. If ! Type(_E_) is not Object, throw a *TypeError* exception.
				1. Let _numberOfArgs_ be the number of arguments passed to this function call.
				1. If _numberOfArgs_ is *0*, throw a *TypeError* exception.
				1. Return ? CreateDataPropertyOrThrow(_E_, *"stack"*, _value_);
			</emu-alg>
			<p>The value of the *"name"* property of this function is *"set stack"*.</p>
		</emu-annex>
	</emu-annex>
</emu-annex>
